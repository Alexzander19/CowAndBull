/*JavaScript  jQuery
JAVASCRIPT
Задание
Вам необходимо самостоятельно решить, для какого задания
какой цикл лучше использовать: WHILE, DO WHILE или FOR.*/

/* *******************************************************************************
1. Подсчитать сумму всех чисел в заданном пользователем
диапазоне.*/

let from = 10;
let to   = 567;
let sum  = 0;


for(let i = from; i <= to; i ++)
    sum += i;

console.log('Для справки. Сумма вспех чисел от ' + from + ' до ' + to + ' равна ' + sum);


/* 
*********************************************************************************

2. Запросить 2 числа и найти только наибольший общий
делитель. */



let x = 190;

let y = 1986;

console.log('НОД чисел '+ x +' и ' + y + ': ' + findNOD(x,y))



/* У меня было решение школьника 5 го класса.
Вот ниже решение программиста с сайта mozilla.
ОЧчень круто. Почти ничего не делает, кроме вызова себя но результат находит
А я ведь думал сделать функцию вычисления НОД для любого количества аргументов.
Попробую сделать такую с использованием моего алгоритма в следующей домашней.
а после разобраться и повторить вот эту с сайта mozilla:

КОММЕНТАРИИ В ФУНКЦИИ И ВЫВОД В КОНСОЛЬ - МОИ
как было:
Math.gcd = function () { 
    if (arguments.length == 2) {  
      if (arguments[1] == 0) return arguments[0]; 
      else return Math.gcd(arguments[1], arguments[0] % arguments[1]);
    } else if (arguments.length > 2) {
      var result = Math.gcd(arguments[0], arguments[1]);
      for (var i = 2; i < arguments.length; i++)
        result = Math.gcd(result, arguments[i]);
      return result;
    }
  };
*/

let iteration = 0 // счетчик итерация

Math.gcd = function () { // добавлем свой метод объекту Math
        //----------------------------------------------------------------
        iteration += 1;
        console.log('Итерация: ' + iteration )
        for(argument of arguments)
            console.log ('аргументы: ' + argument)
        //-----------------------------------------------------------------
    if (arguments.length == 2) {  // если передано два аргумета
        
        // ----------------------------------------------------------------
        console.log('ПЕРЕДАНО ДВА АРГУМЕНТА')
        //-----------------------------------------------------------------

        // передано два аргумента  аргумент с индексом 1 равен  0 (или пустая строка) возвращаем аргумент с индексом 0
        if (arguments[1] == 0){
            console.log('Аргумент с  индексом 1 = '+ arguments[1] + ' (равен нулю)')
            console.log('Возвращаем оргумент с индексом 0, это: ' + arguments[0])
        
        return arguments[0];
    
        }

        // передано два аргумента  аргумент с индексом 1 НЕ равен  0 (или пустОЙ строкЕ)
        else {
            console.log('передано два аргумента  аргумент с индексом 1 НЕ равен  0 (или пустОЙ строкЕ) ')
            console.log('возвращаем результат вызова метода .gcd (Агументы: Индекс 0)')
            return Math.gcd(arguments[1], arguments[0] % arguments[1]); // возвращаем результат вызова метода .gcd (Агументы: Наименьший, Остаток от деления наибольшего на наименьший)
                                                                        
        }

    } else if (arguments.length > 2) {
      var result = Math.gcd(arguments[0], arguments[1]);
      for (var i = 2; i < arguments.length; i++)
        result = Math.gcd(result, arguments[i]);
      return result;
    }
  };

  console.log(Math.gcd(167,191)); // 

  


/*
****************************************************************************************

3. Запросить у пользователя число и вывести все делители
этого числа.

*/

let n = 16161456;
let nmultipler = [];

for(let i = 1; i <= n; i ++){
    if( n % i == 0)
        nmultipler.push(i);

}

console.log('Делители числа '+ n + ' это ' + nmultipler)


/*
********************************************************************************************

4. Определить количество цифр в введенном числе.
*учтем, что числа могут быть и после запятой (точки).

*/
//n = 1234567890991246246246346752.3; // в данном случае число округляется до 17 знаков целой части, поэтому цифру 3 десятых не считает

n = 0.123456789
let tempn;

let nlength = 0;

// определяем модуль числа n
if(n < 0)
    tempn = parseFloat(-1 * n);
else
    tempn = parseFloat(n);

    // теперь tempn - только положительное число

console.log(tempn)

console.log(typeof(tempn)) // Может быть типа float

 

nlength = 0;

while( (parseFloat( tempn +'E+'+nlength)) % 1 !=0)// так пока что считает без добавления лишних цифр после запятой
    nlength ++;
     
    

if(tempn < 1)
    nlength += 1; // если 0.12412, то не забываем, что 0 - это тоже цифра

while( tempn > 1 ){
    tempn = tempn/10
    nlength += 1;

}
console.log('Число ' + n + ' состоит из ' + nlength + ' цифр') 
    






/*
5. Запросить у пользователя 10 чисел и подсчитать, сколько
он ввел положительных, отрицательных и нулей. При этом
также посчитать, сколько четных и нечетных. Вывести
статистику на экран. Учтите, что достаточно одной пере-
менной (не 10) для ввода чисел пользователем.
6. Зациклить калькулятор. Запросить у пользователя 2 числа
и знак, решить пример, вывести результат и спросить, хо-
чет ли он решить еще один пример. И так до тех пор, пока
пользователь не откажется.
7. Запросить у пользователя число и на сколько цифр его
сдвинуть. Сдвинуть цифры числа и вывести результат (если
число 123456 сдвинуть на 2 цифры, то получится 345612).*/

